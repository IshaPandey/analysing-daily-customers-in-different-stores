# -*- coding: utf-8 -*-
"""COMP_1800_CW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AR4PlnlkPbx0yNL5EAm_KMQLMX1jOhcq
"""

!pip install hvplot
import holoviews as hv
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns
import hvplot.pandas

data = pd.read_csv('https://tinyurl.com/ChrisCoDV/001139282/DailyCustomers.csv', index_col=0)
data.index = pd.to_datetime(data.index)

print(data.head())
print(data.describe())

data = data.reindex(data.sum().sort_values(ascending=False).index, axis=1)
print(data.head())

#Using colors
colours = []
for name in data.columns:
    total_Customers = data[name].sum()
    if total_Customers > 300000:
        colour = 'green'
    elif total_Customers > 150000:
        colour = 'orange'
    elif total_Customers > 30000:
        colour = 'Yellow'
    elif total_Customers > 10000:
        colour = 'Pink'
    elif total_Customers > 5000:
          colour = 'Black'
    else:
        colour = 'red'
    colours.append(colour)
plt.figure(figsize=(20, 20))
x_pos = np.arange(len(data.columns))
plt.bar(x_pos, data.sum(), align='center', color=colours)
plt.xticks(x_pos, data.columns)
plt.xlabel('Stores', fontsize=18)
plt.ylabel('Customers', fontsize=18)
plt.title('Daily Number of customers on the store', fontsize=21)
plt.show()

selected = ['RAH','SGA','SMM','QSN']

plt.figure(figsize=(8, 8))
plt.plot(data[selected], linewidth=0.5)
plt.gca().set_prop_cycle(None)
for name in selected:
    x = np.arange(len(data[name]))
    z = np.polyfit(x, data[name], 1)
    trend = np.poly1d(z)
    plt.plot(data.index, trend(x), linestyle='--')
plt.xlabel('Date', fontsize=18)
plt.ylabel('Customer Count', fontsize=18)
plt.title('High Customer Volume top 4 stores'
    + ' with Trendlines', fontsize=20)
plt.legend(selected, loc=2)
plt.show()

sample_rate = 'W'
averaged_data = data.resample(sample_rate).mean()

selected = ['RAH','SMM','QSN', 'YYO','ZSD', 'MAJ']

plt.figure(figsize=(8, 8))
plt.plot(data[selected], linewidth=0.5)
plt.gca().set_prop_cycle(None)
plt.plot(averaged_data[selected], linewidth=2)
plt.xlabel('Date', fontsize=18)
plt.ylabel('Customers', fontsize=18)
plt.title('High Customer flow in top 3 and bottom 3 with Weekly Averages',
    fontsize=20)
plt.legend(data[selected], loc=2)
plt.show()

selected = ['XML','ENY','YGY','BZM','UGJ','CFG' ]

counter = 1
fig = plt.figure(figsize=(7,8))
fig.suptitle('Customer Flow correlations in stores with medium customers',
    fontsize=12, position=(0.5, 1.0))
for i, name_i in enumerate(selected):
    for j in range(i + 1, len(selected)):
        name_j = selected[j]
        sub = fig.add_subplot(4, 4, counter)
        sub.set_title(name_i + ' vs ' + name_j,

            fontsize=10)
        sub.scatter(data[name_i], data[name_j], s=5)
        counter += 1
plt.subplots_adjust(wspace=0.5, hspace=0.5)
plt.tight_layout()
plt.show()

#Interactive
selected = ['RAH','SGA','SMM','QSN']

x_min = 250
x_max = 550
bin_width = 10
n_bins = int((bin_width + x_max - x_min) / bin_width)
print(str(n_bins) + ' bins')
bins = [(x_min + x * (bin_width + x_max - x_min) / n_bins) for x in range(int(n_bins))]

plot = data[selected].hvplot.hist(
    frame_height=500, frame_width=500,
    xlabel='Total customer visit', ylabel='Frequency',
    title='High Volume customer flow',
    alpha=0.5, muted_alpha=0, muted_fill_alpha=0, muted_line_alpha=0,
    tools=['pan', 'box_zoom', 'wheel_zoom', 'undo', 'redo', 'hover', 'save', 'reset'],
    bins=bins
)
hv.extension('bokeh')
plot

selected = ['RAH','SGA','SMM','QSN']

plot = data[selected].hvplot.line(
    frame_height=500, frame_width=500,
    xlabel='Date', ylabel=' Customer flow  per day',
    title='High Volume customer flow'
)
hv.extension('bokeh')
plot

storemarketing = pd.read_csv('https://tinyurl.com/ChrisCoDV/001139282/StoreMarketing.csv', index_col=0)
storeoverhead = pd.read_csv('https://tinyurl.com/ChrisCoDV/001139282/StoreOverheads.csv', index_col=0)
storesize = pd.read_csv('https://tinyurl.com/ChrisCoDV/001139282/StoreSize.csv', index_col=0)
storestaff = pd.read_csv('https://tinyurl.com/ChrisCoDV/001139282/StoreStaff.csv', index_col=0)

summary_data = pd.DataFrame(index=data.columns)
summary_data['Customers'] = data.sum().values
summary_data['StoreMarketing'] = storemarketing.values
summary_data['StoreOverheads'] = storeoverhead.values
summary_data['StoreSizes'] = storesize.values
summary_data['StoreStaffs'] = storestaff.values

print(summary_data.head())
print(summary_data.tail())
print(summary_data.describe())

plt.figure(figsize=(8, 8))
plt.scatter(summary_data['StoreMarketing'], summary_data['StoreSizes'])
plt.title('Marketing spend vs StoreSize', fontsize=20)
plt.xlabel('Marketing spend (Â£)', fontsize=18)
plt.ylabel('StoreSize', fontsize=18)
plt.show()

plt.figure(figsize=(8, 8))
corr = summary_data.corr()
ax = sns.heatmap(corr, vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(220, 20, n=200),
    square=True, annot=True, annot_kws={"size": 8})
ax.set_xticklabels(ax.get_xticklabels(), rotation=45,
    horizontalalignment='right')
plt.show()

summary_data['BubbleSize'] = summary_data['StoreStaffs']
plt.figure(figsize=(8, 8))
plt.scatter(summary_data['StoreOverheads'], summary_data['StoreSizes'], s=summary_data['BubbleSize'], alpha=0.5)
plt.xticks([10, 20, 30, 40, 50])
plt.yticks([10, 20, 30, 40, 50])
plt.title('StoreOverheads vs StoreSizes (vs StoreStaffs)', fontsize=20)
plt.xlabel('StoreOverheads', fontsize=18)
plt.ylabel('StoreSizes', fontsize=18)
for i, name in enumerate(summary_data.index):
    plt.annotate(name, (summary_data['StoreOverheads'][i], summary_data['StoreSizes'][i]))
plt.plot([0, 50], [0, 50], linestyle=':', color='r', label='StoreOverheads = StoreSizes ( Zero StoreStaffs)')
plt.legend(loc=2)
plt.show()

#Radarplot Subplot
normalised_data = summary_data / summary_data.max()
print(normalised_data.head())

selected = ['RAH','SGA','SMM','QSN']

n_attributes = len(normalised_data.columns)
angles = [n / float(n_attributes) * 2 * np.pi for n in range(n_attributes + 1)]
plt.figure(figsize=(8, 8))
counter = 1
for name in selected:
    values = normalised_data.loc[[name]].values.flatten().tolist()
    values += values[:1]
    sub = plt.subplot(2, 2, counter, polar=True)
    sub.plot(angles, values)
    sub.fill(angles, values, alpha=0.1)
    sub.set_ylim(ymax=1.05)
    sub.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])
    sub.set_xticks(angles[0:-1])
    sub.set_xticklabels(normalised_data.columns, fontsize=8)
    sub.set_title('Store ' + name, fontsize=12, loc='left')
    counter += 1
plt.tight_layout()
plt.show()

#Radar plot Overlaid
normalised_data = summary_data / summary_data.max()
print(normalised_data.head())

selected = ['RAH','SGA','SMM','QSN']

n_attributes = len(normalised_data.columns)
angles = [n / float(n_attributes) * 2 * np.pi for n in range(n_attributes + 1)]
colours = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'w']
c = 0
plt.figure(figsize=(8, 8))
sub = plt.subplot(1, 1, 1, polar=True)
for name in selected:
    values = normalised_data.loc[[name]].values.flatten().tolist()
    values += values[:1]
    sub.plot(angles, values, colours[c % len(colours)], label='Store ' + name)
    sub.fill(angles, values, colours[c % len(colours)], alpha=0.1)
    sub.set_ylim(ymax=1.05)
    sub.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])
    sub.set_xticks(angles[0:-1])
    sub.set_xticklabels(normalised_data.columns)
    c += 1
plt.legend(loc=1)
plt.show()